Shader "Custom/VisibleByLight2D"
{
    Properties
    {
        _MainTex ("Sprite Texture", 2D) = "white" {}
        _LightPos ("Light Position", Vector) = (0,0,0,0)
        _LightRadius ("Light Radius", Float) = 5.0
        _Fade ("Edge Softness", Float) = 0.5
    }

    SubShader
    {
        Tags { "RenderType"="Transparent" "Queue"="Transparent" }
        Blend SrcAlpha OneMinusSrcAlpha
        Cull Off ZWrite Off

        Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            #include "UnityCG.cginc"

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                float4 vertex : SV_POSITION;
                float2 worldPos : TEXCOORD1;
            };

            sampler2D _MainTex;
            float4 _MainTex_ST;

            float2 _LightPos;
            float _LightRadius;
            float _Fade;

            v2f vert (appdata v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = TRANSFORM_TEX(v.uv, _MainTex);
                o.worldPos = mul(unity_ObjectToWorld, v.vertex).xy;
                return o;
            }

            fixed4 frag (v2f i) : SV_Target
            {
                fixed4 col = tex2D(_MainTex, i.uv);
                
                float dist = distance(i.worldPos, _LightPos);
                float visibility = smoothstep(_LightRadius, _LightRadius - _Fade, dist);
                visibility = 1 - saturate(visibility); // invert so closer = visible
                
                col.a *= visibility;
                return col;
            }
            ENDCG
        }
    }
}
